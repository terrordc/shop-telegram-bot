# This file is automatically @generated by Poetry 2.1.4 and should not be changed by hand.

# Start with the same OS as your VPS
FROM ubuntu:22.04

# Set environment variables to prevent interactive prompts during setup
ENV DEBIAN_FRONTEND=noninteractive
ENV POETRY_HOME="/opt/poetry"
ENV POETRY_VERSION="1.8.2"
# Add Poetry's bin directory to the system's PATH
ENV PATH="$POETRY_HOME/bin:$PATH"

# Install system dependencies, including the Python version you need
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-dev \
    python3.10-venv \
    build-essential \
    curl \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry using the recommended method
RUN curl -sSL https://install.python-poetry.org | python3 - --version ${POETRY_VERSION}

# Set the working directory inside the container
WORKDIR /app

# Tell Poetry to create the virtual environment inside the project directory
RUN poetry config virtualenvs.in-project true

# --- Caching Optimization ---
# 1. Copy only the dependency definition files
COPY poetry.lock pyproject.toml ./

# 2. Install dependencies. This layer is only rebuilt if the lock file changes.
#    Using --no-interaction and --no-ansi is best practice for CI/CD environments.
RUN poetry install --no-interaction --no-ansi --no-root

# 3. Now copy the rest of your application code
COPY . .

# The command to run when the container starts
# This now uses the virtual environment created inside the /app directory
CMD ["poetry", "run", "python", "src/__init__.py"]